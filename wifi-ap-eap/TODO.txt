- DONE change shared secret for hostapd/radius
  - and store it in a secure location for hostapd
  - we could auto-generate this
  - hostapd doesn't seem to have any way to put the secret in a different file
- DONE auto-generate certificates
  - add options for setting certificate options, e.g. name
  - auto-generate certificates
  - store them in /var/lib/freeradius ?
    -> probably not; where are the SSH private keys? -> /etc/ssh
- DONE automatically enable 4-address mode if requested
- DONE add script to generate user cert
  - similar to the script for task server
  - also generate pfx file for android:
    - openssl pkcs12 -export -in daniela@laptop.pem -out daniela@laptop.pfx -passin pass:x -passout pass:x
    - Can we use the .p12 file?
      -> yes, but ca file needs .crt extension
- DONE accounting shouldn't use user name for client cert
  -> workaround: force user name to match certificate
- add option for putting the users file in another place
  - radius group must have access and the user cannot do that before the group exists
  - We can copy the file to the statedir - on start and reload.
- missing network interfaces shouldn't delay boot
- publish the config somewhere
- maybe add something that creates graphs from accounting data
  - bandwidth per day/hour; total and per device/user
- revocation
  - https://jamielinux.com/docs/openssl-certificate-authority/certificate-revocation-lists.html
  - https://wiki.alpinelinux.org/wiki/FreeRadius_EAP-TLS_configuration
- How is the structure of the certificates?
  - In particular: If client certificates are also signed by the CA - what stops them from impersonating
    the server? Clients can check the common name but the default is to not do that.
- don't split options, i.e. don't use services.hostapd?
  - option 1: copy services.wifi-ap-eap.hostapd to services.hostapd if enabled
  - option 2: don't enable services.hostapd; copy the relevant parts to our .nix files

find ${logdir}/tlscache -mtime +2 -exec rm -f {} \;

ESP32:
- https://github.com/espressif/esp-idf/issues/1297
- SHA1, 2048 bit
- probably fixed: https://github.com/espressif/esp-idf/commit/bc97b0f380210b97b7fd98c5f304af7e83c28b7f
