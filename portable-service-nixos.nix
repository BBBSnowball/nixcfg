{ pkgs, lib ? pkgs.lib, stdenv ? pkgs.stdenv }@args1: {
  # NixOS configuration, usually created with: nixpkgs.lib.nixosSystem { system = ...; modules = ...; }
  nixosConfiguration
  # Copy extra paths paths from /etc of the configuration.
  #FIXME We might want to copy everything by default and have a list of things not to copy (e.g. unrelated services to avoid adding their dependencies).
, keepEtcNames
  # Other arguments will be passed to portableService.
, ...
}@args2:
let
  portableService = import ./portable-service.nix args1;

  withOverrides = drv: drv // rec {
    overridePortableServiceNixOS = f: import ./portable-service-nixos.nix args1 (f args2);
  };

  pname = args2.pname or nixosConfiguration.config.system.name;
  etc = nixosConfiguration.config.system.build.etc;

  etcForService = pkgs.runCommand "${pname}-etc" { inherit pname etc; } ''
    mkdir -p $out/etc/systemd/system
    # We copy with `-L` because systemd will read the files outside of the portable service
    # environment, i.e. symlinks with absolute paths won't work.
    cp -dRL $etc/etc/systemd/system/"$pname"* $out/etc/systemd/system/
    chmod -R +w $out/etc

    for x in ${lib.escapeShellArgs keepEtcNames} ; do
      x2="/etc/$x"
      mkdir -p "$out''${x2%/*}"
      #FIXME Our nix-prepare service needs these to not be symlinks so we copy with `-L` but this is probably not a good default in general.
      cp -dRTL "$etc$x2" "$out$x2"
      chmod -R +w "$out$x2"
    done

    # NixOS doesn't populate the [Install] section and creates bla.target.wants symlinks instead.
    # This is good for stateless configuration but not useful for our portable service.
    #
    # First, remove existing [Install] sections that might be present for units that have been
    # copied from a package rather than generated by NixOS.
    grep -lri '\[Install\]' $out/etc/systemd/system/ | while read x ; do
      sed -bi '/^\[Install\]/,/^\[/ { /^\[Install\]/ d; /^[^\[]/ d }' "$x"
    done

    # Now, find relevant symlinks and add them to the relevant [Install] section.
    for x in $etc/etc/systemd/system/*.wants/"$pname"* ; do
      unit="''${x##*/}"
      x2="''${x%.wants/*}"
      target="''${x2##*/}"
      echo '[Install]' >>$out/etc/systemd/system/"$unit"
      echo "# from $x" >>$out/etc/systemd/system/"$unit"
      echo "WantedBy=$target" >>$out/etc/systemd/system/"$unit"
    done

    # NixOS uses overrides if the service is copied from a package but we want to change some settings.
    # systemd would ignore them for a portable service so we merge them with the main service.
    for x in $out/etc/systemd/system/* ; do
      if [ -e "$x.d" ] ; then
        for y in "$x.d"/*.conf ; do
          # We remove the prefix /nix/store/... when writing the comment in the output file because we don't want to
          # add any dependency with the comment.
          echo "" >>"$x"
          echo "# /''${y#/*/*/*/}" >>"$x"
          cat "$y" >>"$x"
          rm "$y"
        done
        rmdir "$x.d"
      fi
    done
  '';
in
  withOverrides (portableService ((builtins.removeAttrs args2 [ "nixosConfiguration" "keepEtcNames" ]) // {
    inherit pname;
    rootFsContents = [ etcForService ] ++ (args2.rootFsContents or []);

    # portableService requires a value for units but we usually handle this in makeContents, i.e. an empty list is fine.
    units = args2.units or [];

    extraInstallCommands = ''
      # add some info about the host config, similar to what nixpkgs would do for the toplevel
      # https://github.com/NixOS/nixpkgs/blob/45b92369d6fafcf9e462789e98fbc735f23b5f64/nixos/modules/system/activation/top-level.nix#L75
      echo -n "${nixosConfiguration.config.boot.loader.grub.configurationName}" > $out/configuration-name
      echo -n "${nixosConfiguration.config.system.nixos.label}" > $out/nixos-version
      echo -n "${nixosConfiguration.config.boot.kernelPackages.stdenv.hostPlatform.system}" > $out/system
    '';

    passthru = {
      inherit etc nixosConfiguration etcForService;
    };
  }))
