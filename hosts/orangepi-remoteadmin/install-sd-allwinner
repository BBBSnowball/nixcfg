#! /usr/bin/env nix-shell
#! nix-shell -i zsh -p zsh parted vboot_reference util-linux

# based on https://git.c3pb.de/jens/dotfiles/-/blob/master/bin/install-sd-allwinner

set -euo pipefail

readonly mount_point=/mnt/mnt

readonly infofile="$(dirname $0)/info.zsh"
if [ -e "$infofile" ] ; then
  source "$infofile"
  readonly machine="${info[hostName]}"
  readonly fixedMachine=1
elif [[ -v 1 ]] ; then
  readonly machine="$1"
  shift
  readonly fixedMachine=0
  source "$(nix build -L --print-out-paths .#nixosConfigurations.$machine.config.system.build.orangepi-installer)/info.zsh"
else
  readonly machine=""
  readonly fixedMachine=0
fi


if [[ -z "$machine" || ! -v 1 || "$1" != "--wipe-this-disk" || ! -v 2 ]] ; then
  if [[ $fixedMachine == 1 ]] ; then
    echo "Usage: $0 --wipe-this-disk /dev/thesdcard" >&2
    echo "(machine is $machine)" >&2
  else
    echo "Usage: $0 <machine> --wipe-this-disk /dev/thesdcard" >&2
  fi

  echo "" >&2
  echo "The target partition will be mounted to $mount_point, which must already exist." >&2

  if [[ -n "$machine" && -e "/dev/disk/by-uuid/${info[rootfsUUID]}" ]] ; then
    echo "" >&2
    echo "Hint: Existing root partition with the correct UUID is here so maybe you" >&2
    echo "want the disk of that partition (or you want to use a different UUID!):" >&2
    echo "  $(realpath "/dev/disk/by-uuid/${info[rootfsUUID]}")" >&2
  fi
  exit 1
fi
readonly target_disk="$2"

readonly nixos_config_path="${info[toplevel]}"
readonly uboot="${info[u-boot]}"
readonly root_partition_uuid="${info[rootPartitionUUID]}"
readonly root_uuid="${info[rootfsUUID]}"

# Derived paths
readonly root_partition="/dev/disk/by-partuuid/$root_partition_uuid"

set -x

wipefs -a $target_disk

# 2MB header hole
cgpt create -p 4096 $(realpath $target_disk)
cgpt boot -p $(realpath $target_disk)

sfdisk $target_disk --append <<EOF
  unit: sectors
  sector-size: 512

  start=4224, type=69dad710-2ce4-4e3c-b16c-21a1d49abed3, uuid=$root_partition_uuid, name="root"
EOF


partprobe $target_disk

#dd if=$uboot/u-boot-sunxi-with-spl.bin of=$uboot_partition bs=16M conv=fsync oflag=direct status=progress
dd if=$uboot/u-boot-sunxi-with-spl.bin of=$target_disk bs=1024 seek=8 conv=fsync status=progress

# partprobe doesn't seem to be enough for symlinks to appear?
while [[ ! -b $root_partition ]] {
  print "Waiting for $root_partition"
  sleep 1s
}
wipefs -a $root_partition
mkfs.ext4 -U $root_uuid -L root_$machine $root_partition

mount -t ext4 $root_partition $mount_point

nix -L copy --no-check-sigs --to "$mount_point" $nixos_config_path

print "Setting system profile"
nix-env --store $mount_point --profile $mount_point/nix/var/nix/profiles/system --set $nixos_config_path

print "Creating /etc/NIXOS"
mkdir -m 0755 -p "$mount_point/etc"
touch "$mount_point/etc/NIXOS"

if [[ -e "/etc/nixos/hosts/${machine}" ]] ; then
  print "Copy files for host to target"
  mkdir -m 0700 -p "$mount_point/etc/nixos/hosts"
  cp -a "/etc/nixos/hosts/${machine}" "$mount_point/etc/nixos/hosts/${machine}"
  ls -1 "/etc/nixos/hosts/${machine}" | while read x ; do
    ln -s "hosts/${machine}/$x" "$mount_point/etc/nixos/$x"
  done
fi

# Install bootloader with zero generations (except the default one that we pass here)
# because it would pick up those generations from the build host. We could use nixos-enter
# to run extlinux in the target directory but nixos-enter fails (probably because the
# target has a different architecture and binfmt doesn't work in the new environment).
${(z)info[extlinuxPopulateCmd]} -d $mount_point/boot -c $nixos_config_path -g 0

umount "$mount_point"

sync

echo done.

